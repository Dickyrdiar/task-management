// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id             String          @id @default(uuid())
  name           String
  description    String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  status         StatusProject   @default(active)
  ownerId        String // Removed the ? to make it required
  owner          User            @relation("OwnedProjects", fields: [ownerId], references: [id])
  tickets        Ticket[]
  projectMembers ProjectMember[]
  Agile          Agile[]
}

model ProjectMember {
  id        String      @id @default(uuid())
  projectId String
  userId    String
  role      ProjectRole @default(MEMBER)
  project   Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
}

model Agile {
  id           String    @id @default(uuid())
  sprintNumber String
  userId       String
  projectId    String
  startDate    DateTime?
  endDate      DateTime?

  // Relasi
  user    User     @relation(fields: [userId], references: [id])
  project Project  @relation(fields: [projectId], references: [id])
  tickets Ticket[] // satu sprint bisa punya banyak ticket

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], name: "UserRefreshTokens")
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model User {
  id                String          @id @default(uuid())
  name              String
  email             String          @unique
  username          String          @unique
  password          String
  role              String
  provider          String          @default("local") // 'local', 'github'
  githubId          String?         @unique
  avatar            String?
  ownedProjects     Project[]       @relation("OwnedProjects")
  projectMemberShip ProjectMember[]
  tickets           Ticket[]        @relation("TicketAssignments")
  refreshTokens     RefreshToken[]  @relation(name: "UserRefreshTokens")
  Comment           Comment[]
  Agile             Agile[]
}

model Ticket {
  id          String         @id @default(uuid())
  title       String
  status      TicketStatus   @default(OPEN)
  priority    TicketPriority @default(LOW)
  projectId   String?
  project     Project?       @relation(fields: [projectId], references: [id])
  assignments User[]         @relation("TicketAssignments")
  comments    Comment[]      @relation("TicketComments")
  Agile       Agile?         @relation(fields: [agileId], references: [id])
  agileId     String?
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  ticketId  String
  ticket    Ticket   @relation("TicketComments", fields: [ticketId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model TokenBlacklist {
  id        String   @id @default(uuid())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([token])
  @@index([expiresAt])
}

enum StatusProject {
  active
  archive
  pending
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ProjectRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}
